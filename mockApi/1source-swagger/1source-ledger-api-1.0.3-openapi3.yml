openapi: 3.0.0
info:
  description: |
    1Source Ledger API provides client access to the 1Source Ledger. You can find
    out more about 1Source at
    [https://equilend.com](https://equilend.com).
    
    This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.
    
    API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way.
  version: 1.0.3
  title: 1Source Ledger API
  termsOfService: 'https://equilend.com/terms-and-conditions/'
  contact:
    email: 1source_help@equilend.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: parties
    description: Read the set of registered trading parties
  - name: events
    description: Read contract events
  - name: agreements
    description: Execution venue trade agreements either on or off platform
  - name: contracts
    description: Manage contracts on the ledger
  - name: rerates
    description: Propose, approve, decline a contract rerate
  - name: returns
    description: Initiate and manage a return on a contract
  - name: recalls
    description: Initiate and manage a recall on a contract
  - name: buyins
    description: Initiate and manage a buyin on a contract
paths:
  '/ledger/parties':
    get:
      tags:
        - parties
      summary: Read a collection of registered trading parties.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of Parties'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Parties'
        '500':
          '$ref': '#/components/responses/Error'
    # post:
    #   tags:
    #     - parties
    #   summary: Create a new 1Source party
    #   security:
    #     - 1sourceBearerAuth: []
    #   requestBody:
    #     '$ref': '#/components/requestBodies/Party'
    #   responses:
    #     '201':
    #       '$ref': '#/components/responses/Success'
    #     '500':
    #       '$ref': '#/components/responses/Error'
  '/ledger/parties/{partyId}':
    parameters:
      - name: partyId
        description: 'The unique identifier of a party'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/PartyId'
    get:
      tags:
        - parties
      summary: Read a party
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The party corresponding to the provided "partyId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Party'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/agreements':
    get:
      tags:
        - agreements
      summary: Read a collection of trade agreements. Defaults to return the last 100 trade agreeements created.
      security:
        - 1sourceBearerAuth: [ ]
      parameters:
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: 'Agreements created (since) timestamp UTC'
          required: false
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: 'Agreements created (before) timestamp UTC'
          required: false
        - in: query
          name: size
          schema:
            type: integer
          description: 'Number of agreements to be returned. Can be used to facilitate paging'
          required: false
      responses:
        '200':
          description: 'List of trade agreements'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Agreements'
        '500':
          '$ref': '#/components/responses/Error'
    post:
      tags:
        - agreements
      summary: Create a trade agreement
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        '$ref': '#/components/requestBodies/TradeAgreement'
      responses:
        '201':
          '$ref': '#/components/responses/Success'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/agreements/{agreementId}':
    parameters:
      - name: agreementId
        description: 'The unique identifier of a trade agreement'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/AgreementId'
    get:
      tags:
        - agreements
      summary: Read an agreement
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The trade agreement corresponding to the provided "agreementId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Agreement'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/agreements/{agreementId}/cancel':
    parameters:
      - name: agreementId
        description: 'The unique identifier of an agreement'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/AgreementId'
    # post:
    #   tags:
    #     - agreements
    #   summary: Cancel an agreement in "proposed" state. Original proposer only.
    #   security:
    #     - 1sourceBearerAuth: []
    #   responses:
    #     '200':
    #       description: 'The agreement corresponding to the provided "agreementId" is canceled'
    #       headers:
    #         Location:
    #           '$ref': '#/components/headers/AgreementId'
    #       content:
    #         application/json:
    #           schema:
    #             '$ref': '#/components/responses/Success'
    #     '401':
    #       '$ref': '#/components/responses/Unauthorized'
    #     '404':
    #       '$ref': '#/components/responses/NotFound'
    #     '500':
    #       '$ref': '#/components/responses/Error'
  '/ledger/contracts':
    get:
      tags:
        - contracts
      summary: Read a collection of contracts. Defaults to return the last 100 contracts created.
      security:
        - 1sourceBearerAuth: [ ]
      parameters:
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: 'Contracts created (since) timestamp UTC'
          required: false
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: 'Contracts created (before) timestamp UTC'
          required: false
        - in: query
          name: size
          schema:
            type: integer
          description: 'Number of contracts to be returned. Can be used to facilitate paging'
          required: false
      responses:
        '200':
          description: 'List of contracts'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Contracts'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
    post:
      tags:
        - contracts
      summary: Create a contract in "proposal" state. Normally done by the Lend side
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        '$ref': '#/components/requestBodies/ContractProposal'
      responses:
        '201':
          description: 'The contract was created'
          headers:
            Location:
              '$ref': '#/components/headers/ContractId'
          content:
            application/json:
              schema:
                '$ref': '#/components/responses/Success'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    get:
      tags:
        - contracts
      summary: Read a specific contract the user is authorized to access
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Contract'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
    patch:
      tags:
        - contracts
      summary: Update unilateral fields in a contract
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - '$ref': '#/components/schemas/SettlementInstructionUpdate'
                - '$ref': '#/components/schemas/InternalReferenceUpdate'
                - '$ref': '#/components/schemas/SettlementStatusUpdate'
      responses:
        '200':
          '$ref': '#/components/responses/Success'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/approve':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    post:
      tags:
        - contracts
      summary: Approve a contract in "proposed" state
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        '$ref': '#/components/requestBodies/SettlementInstructionUpdate'
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is approved'
          headers:
            Location:
              '$ref': '#/components/headers/ContractId'
          content:
            application/json:
              schema:
                '$ref': '#/components/responses/Success'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '409':
          '$ref': '#/components/responses/Conflict'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/cancel':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    post:
      tags:
        - contracts
      summary: Cancel a contract in "proposed" state. Original proposer only.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is canceled'
          headers:
            Location:
              '$ref': '#/components/headers/ContractId'
          content:
            application/json:
              schema:
                '$ref': '#/components/responses/Success'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/decline':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    post:
      tags:
        - contracts
      summary: Decline a contract in "proposed" state
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is declined'
          headers:
            Location:
              '$ref': '#/components/headers/ContractId'
          content:
            application/json:
              schema:
                '$ref': '#/components/responses/Success'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/events':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    get:
      tags:
        - events
      summary: Read collection of events against a specific contract. With no parameters returns events since start of current day.
      security:
        - 1sourceBearerAuth: [ ]
      parameters:
        - in: query
          name: eventType
          schema:
            type: array
            items:
              '$ref': '#/components/schemas/EventType'
          description: 'Filter by event type'
          required: false
        - in: query
          name: fromEventId
          schema:
            type: integer
            format: int32
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: 'Events (since) timestamp UTC'
          required: false
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: 'Events (before) timestamp UTC'
          required: false
        - in: query
          name: size
          schema:
            type: integer
            format: int32
          description: 'Number of events to be returned. Can be used to facilitate paging'
          required: false
      responses:
        '200':
          description: 'List of events'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Events'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/events/{eventId}':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: eventId
        description: 'The unique identifier of an Event'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/EventId'
    get:
      tags:
        - events
      summary: Read an event
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The event corresponding to the provided "eventId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Event'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/returns':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    get:
      tags:
        - returns
      summary: Read collection of returns against contract specified by `contractId`'
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of returns'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Returns'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
    post:
      tags:
        - returns
      summary: Create a return
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/Return'
      responses:
        '201':
          description: 'The return was created'
          headers:
            Location:
              '$ref': '#/components/headers/ReturnId'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/returns/{returnId}':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: returnId
        description: 'The unique identifier of a return'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ReturnId'
    get:
      tags:
        - returns
      summary: Read a return
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The return corresponding to the provided "returnId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Return'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/returns/{returnId}/cancel':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: returnId
        description: 'The unique identifier of a return'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ReturnId'
    post:
      tags:
        - returns
      summary: Cancel a return in "proposed" state. Original proposer only.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Contract'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/recalls':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    get:
      tags:
        - recalls
      summary: Read collection of recalls against contract specified by `contractId`'
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of recalls'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Recalls'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
    post:
      tags:
        - recalls
      summary: Create a recall
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/Recall'
      responses:
        '201':
          description: 'The recall was created'
          headers:
            Location:
              '$ref': '#/components/headers/RecallId'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/recalls/{recallId}':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: recallId
        description: 'The unique identifier of a recall'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RecallId'
    get:
      tags:
        - recalls
      summary: Read a recall
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The recall corresponding to the provided "recallId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Recall'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/recalls/{recallId}/cancel':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: recallId
        description: 'The unique identifier of a recall'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RecallId'
    post:
      tags:
        - recalls
      summary: Cancel a recall in "proposed" state. Original proposer only.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The recall corresponding to the provided "recallId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Recall'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/rerates':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    get:
      tags:
        - rerates
      summary: Read collection of rerates against contract specified by `contractId`'
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of rerates'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Rerates'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
    post:
      tags:
        - rerates
      summary: Create a rerate
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        '$ref': '#/components/requestBodies/RerateProposal'
      responses:
        '201':
          description: 'The rerate was created'
          headers:
            Location:
              '$ref': '#/components/headers/RerateId'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/rerates/{rerateId}':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: rerateId
        description: 'The unique identifier of a rerate'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RerateId'
    get:
      tags:
        - rerates
      summary: Read a rerate
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The rerate corresponding to the provided "rerateId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Rerate'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/rerates/{rerateId}/approve':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: rerateId
        description: 'The unique identifier of a rerate'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RerateId'
    post:
      tags:
        - rerates
      summary: Approve a rerate in "proposed" state.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Contract'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/rerates/{rerateId}/cancel':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: rerateId
        description: 'The unique identifier of a rerate'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RerateId'
    post:
      tags:
        - rerates
      summary: Cancel a rerate in "proposed" state. Original proposer only.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Contract'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/rerates/{rerateId}/decline':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: rerateId
        description: 'The unique identifier of a rerate'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RerateId'
    post:
      tags:
        - rerates
      summary: Decline a rerate in "proposed" state.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The contract corresponding to the provided "contractId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Contract'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/buyins':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
    get:
      tags:
        - buyins
      summary: Read collection of buyins against contract specified by `contractId`'
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of buyins'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyins'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
    post:
      tags:
        - buyins
      summary: Create a buyin
      security:
        - 1sourceBearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/Buyin'
      responses:
        '201':
          description: 'The buyin was created'
          headers:
            Location:
              '$ref': '#/components/headers/BuyinId'
        '400':
          '$ref': '#/components/responses/BadRequest'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/buyins/{buyinId}':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: buyinId
        description: 'The unique identifier of a buyin'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/BuyinId'
    get:
      tags:
        - buyins
      summary: Read a buyin
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The buyin corresponding to the provided "buyinId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyin'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/buyins/{buyinId}/approve':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: buyinId
        description: 'The unique identifier of a buyin'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/BuyinId'
    post:
      tags:
        - buyins
      summary: Approve a buyin in "proposed" state.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The buyin corresponding to the provided "buyinId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyin'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/buyins/{buyinId}/cancel':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: buyinId
        description: 'The unique identifier of a buyin'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/BuyinId'
    post:
      tags:
        - buyins
      summary: Cancel a buyin in "proposed" state. Original proposer only.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The buyin corresponding to the provided "buyinId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyin'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/contracts/{contractId}/buyins/{buyinId}/decline':
    parameters:
      - name: contractId
        description: 'The unique identifier of a contract'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ContractId'
      - name: buyinId
        description: 'The unique identifier of a buyin'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/BuyinId'
    post:
      tags:
        - buyins
      summary: Decline a buyin in "proposed" state.
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The buyin corresponding to the provided "buyinId" is canceled'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyin'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/events':
    get:
      tags:
        - events
      summary: Read collection of events. With no parameters returns events since start of current day.
      security:
        - 1sourceBearerAuth: [ ]
      parameters:
        - in: query
          name: eventType
          schema:
            type: array
            items:
              '$ref': '#/components/schemas/EventType'
          description: 'Filter by event type'
          required: false
        - in: query
          name: fromEventId
          schema:
            type: integer
            format: int32
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: 'Events (since) timestamp UTC'
          required: false
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: 'Events (before) timestamp UTC'
          required: false
        - in: query
          name: size
          schema:
            type: integer
          description: 'Number of events to be returned. Can be used to facilitate paging. Defaults to 100'
          required: false
      responses:
        '200':
          description: 'List of events'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Events'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/events/{eventId}':
    parameters:
      - name: eventId
        description: 'The unique identifier of an event'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/EventId'
    get:
      tags:
        - events
      summary: Read an event
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The event corresponding to the provided "eventId"'
          content:
            application/json:
              schema:
                oneOf:
                  - '$ref': '#/components/schemas/TradeEvent'
                  - '$ref': '#/components/schemas/ContractEvent'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/returns':
    get:
      tags:
        - returns
      summary: Read collection of returns
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of returns'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Returns'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/returns/{returnId}':
    parameters:
      - name: returnId
        description: 'The unique identifier of a return'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/ReturnId'
    get:
      tags:
        - returns
      summary: Read a return
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The return corresponding to the provided "returnId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Return'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/recalls':
    get:
      tags:
        - recalls
      summary: Read collection of recalls
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of recalls'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Recalls'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/recalls/{recallId}':
    parameters:
      - name: recallId
        description: 'The unique identifier of a recall'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RecallId'
    get:
      tags:
        - recalls
      summary: Read a recall
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The recall corresponding to the provided "recallId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Recall'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/rerates':
    get:
      tags:
        - rerates
      summary: Read collection of rerates
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of rerates'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Rerates'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/rerates/{rerateId}':
    parameters:
      - name: rerateId
        description: 'The unique identifier of a rerate'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/RerateId'
    get:
      tags:
        - rerates
      summary: Read a rerate
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The rerate corresponding to the provided "rerateId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Rerate'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/buyins':
    get:
      tags:
        - buyins
      summary: Read collection of buyins
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'List of buyins'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyins'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '500':
          '$ref': '#/components/responses/Error'
  '/ledger/buyins/{buyinId}':
    parameters:
      - name: buyinId
        description: 'The unique identifier of a buyin'
        in: path
        required: true
        schema:
          '$ref': '#/components/schemas/BuyinId'
    get:
      tags:
        - buyins
      summary: Read a buyin
      security:
        - 1sourceBearerAuth: [ ]
      responses:
        '200':
          description: 'The buyin corresponding to the provided "buyinId"'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Buyin'
        '401':
          '$ref': '#/components/responses/Unauthorized'
        '404':
          '$ref': '#/components/responses/NotFound'
        '500':
          '$ref': '#/components/responses/Error'
components:
  schemas:
    TermType:
      type: string
      enum:
        - OPEN
        - TERM
    SettlementType:
      type: string
      enum:
        - DVP
        - FOP
    CollateralType:
      type: string
      enum:
        - CASH
        - NONCASH
        - CASHPOOL
        - TRIPARTY
    RateTypeCd:
      type: string
      enum:
        - FIXED
        - FLOATING
    BenchmarkCd:
      type: string
      enum:
        - EFFR
        - OBFR
        - TGCR
        - BGCR
        - SOFR
    CurrencyCd:
      type: string
      enum:
        - USD
        - EUR
        - GBP
        - JPY
        - AUD
        - HKD
        - CAD
        - CHF
        - SEK
        - SGD
        - NOK
        - DKK
    RoundingMode:
      type: string
      enum:
        - ALWAYSUP
        - ALWAYSDOWN
        - STANDARD
        - EXACT
    CollateralDescription:
      type: string
      enum:
        - NONUSAGENCIES
        - AGENCIES
        - CANADIANBONDS
        - CANADIANPROVINCIALS
        - CORPORATES
        - DEBT
        - EMUDEBTAAA
        - EMUDEBT
        - AUSTRALIANEQUITIES
        - EQUITIES
        - GOVTDEBT105
        - G10DEBT
        - G3DEBT
        - G8DEBT
        - UKGILTS
        - GOVERNMENTISSUES
        - GOVERNMENTISSUESAAA
        - HIGHGRADEEQUITIES
        - INVESTMENTGRADECORPORATES
        - JAPANESEGOVERNMENTBONDS
    # AgreementStatus:
    #   type: string
    #   enum:
    #     - PENDING
    #     - CONFIRMED
    ContractStatus:
      type: string
      enum:
        - PROPOSED
        - APPROVED
        - CANCELED
        - DECLINED
    SettlementStatus:
      type: string
      enum:
        - NONE
        - PENDING
        - MADE
        - DROPPED
        - KILLED
    Instrument:
      type: object
      properties:
        ticker:
          type: string
        cusip:
          type: string
        isin:
          type: string
        sedol:
          type: string
        quick:
          type: string
        figi:
          type: string
        description:
          type: string
        price:
          '$ref': '#/components/schemas/Price'
      required:
        - figi
    AgreementId:
      description: 'The unique identifier of a trade agreement - UUID'
      type: string
    Agreement:
      type: object
      properties:
        agreementId:
          '$ref': '#/components/schemas/AgreementId'
        # status:
        #   '$ref': '#/components/schemas/AgreementStatus'
        lastUpdateDatetime:
          type: string
          format: date-time
        trade:
          '$ref': '#/components/schemas/TradeAgreement'
      required:
        - agreementId
        - status
    Agreements:
      type: array
      items:
        '$ref': '#/components/schemas/Agreement'
    TradeAgreement:
      type: object
      properties:
        executionVenue:
          '$ref': '#/components/schemas/Venue'
        instrument:
          '$ref': '#/components/schemas/Instrument'
        rate:
          oneOf:
            - '$ref': '#/components/schemas/RebateRate'
            - '$ref': '#/components/schemas/FeeRate'
        quantity:
          '$ref': '#/components/schemas/Quantity'
        billingCurrency:
          '$ref': '#/components/schemas/CurrencyCd'
        dividendRatePct:
          type: number
          format: float
        tradeDate:
          type: string
          format: date
        termType:
          '$ref': '#/components/schemas/TermType'
        termDate:
          type: string
          format: date
        settlementDate:
          type: string
          format: date
        settlementType:
          '$ref': '#/components/schemas/SettlementType'
        collateral:
          '$ref': '#/components/schemas/Collateral'
        transactingParties:
          '$ref': '#/components/schemas/TransactingParties'
      required:
        - instrument
        - rate
        - quantity
        - tradeDate
        - collateral
        - transactingParties
    ContractId:
      description: 'The unique identifier of a contract - UUID'
      type: string
    ContractProposal:
      type: object
      properties:
        trade:
          '$ref': '#/components/schemas/TradeAgreement'
        settlement:
          '$ref': '#/components/schemas/Settlement'
    Contract:
      type: object
      properties:
        contractId:
          '$ref': '#/components/schemas/ContractId'
        lastEventId:
          '$ref': '#/components/schemas/EventId'
        contractStatus:
          '$ref': '#/components/schemas/ContractStatus'
        settlementStatus:
          '$ref': '#/components/schemas/SettlementStatus'
        lastUpdatePartyId:
          '$ref': '#/components/schemas/PartyId'
        lastUpdateDatetime:
          type: string
          format: date-time
        trade:
          '$ref': '#/components/schemas/TradeAgreement'
        settlement:
          '$ref': '#/components/schemas/Settlement'
      required:
        - contractId
        - status
        - lastUpdateDatetime
    Contracts:
      type: array
      items:
        '$ref': '#/components/schemas/Contract'
    EventType:
      type: string
      enum:
        - agreement
        - contract
        - rerate
        - return
        - recall
        - buyin
        - allocation
        - split
    EventSubType:
      type: string
      enum:
        - proposed
        - agreed
        - canceled
        - approved
        - declined
        - updated
    EventId:
      description: 'The unique identifier of an event - UUID'
      type: integer
    Event:
      type: object
      properties:
        eventId:
          '$ref': '#/components/schemas/EventId'
        eventType:
          '$ref': '#/components/schemas/EventType'
        eventSubType:
          '$ref': '#/components/schemas/EventSubType'
        eventDatetime:
          type: string
          format: date-time
        resourceUri:
          type: string
      required:
        - eventId
        - eventType
        - eventSubType
    TradeEvent:
      description: 'A trade related event that attaches the current Trade Agreement representation. Note that `TRADE`, `TRADE_CANCEL` will be used as the eventType discriminator value.'
      "allOf":
        - "$ref": "#/components/schemas/Event"
        - type: object
          properties:
            agreement:
              "$ref": "#/components/schemas/Agreement"
    ContractEvent:
      description: 'A contract related event that attaches the current Contract representation. Note that `CONTRACT` will be used as the eventType discriminator value.'
      "allOf":
        - "$ref": "#/components/schemas/Event"
        - type: object
          properties:
            contract:
              "$ref": "#/components/schemas/Contract"
    Events:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/TradeEvent'
          - $ref: '#/components/schemas/ContractEvent'
    ReturnId:
      description: 'The unique identifier of a return - UUID'
      type: string
    Return:
      type: object
      properties:
        returnId:
          '$ref': '#/components/schemas/ReturnId'
        contractId:
          '$ref': '#/components/schemas/ContractId'
        status:
          '$ref': '#/components/schemas/ContractStatus'
        quantity:
          '$ref': '#/components/schemas/Quantity'
        settlement:
          '$ref': '#/components/schemas/Settlement'
        lastUpdateDatetime:
          type: string
          format: date-time
      required:
        - contractId
        - status
        - quantity
        - lastUpdateDatetime
    Returns:
      type: array
      items:
        '$ref': '#/components/schemas/Return'
    RecallId:
      description: 'The unique identifier of a recall - UUID'
      type: string
    Recall:
      type: object
      properties:
        recallId:
          '$ref': '#/components/schemas/RecallId'
        contractId:
          '$ref': '#/components/schemas/ContractId'
        status:
          '$ref': '#/components/schemas/ContractStatus'
        quantity:
          '$ref': '#/components/schemas/Quantity'
        lastUpdateDatetime:
          type: string
          format: date-time
      required:
        - recallId
        - contractId
        - status
        - quantity
        - lastUpdateDatetime
    Recalls:
      type: array
      items:
        '$ref': '#/components/schemas/Recall'
    RerateId:
      description: 'The unique identifier of a rerate - UUID'
      type: string
    Rerate:
      type: object
      properties:
        rerateId:
          '$ref': '#/components/schemas/RerateId'
        contractId:
          '$ref': '#/components/schemas/ContractId'
        status:
          '$ref': '#/components/schemas/ContractStatus'
        rate:
          oneOf:
            - '$ref': '#/components/schemas/RebateRate'
            - '$ref': '#/components/schemas/FeeRate'
        rerate:
          oneOf:
            - '$ref': '#/components/schemas/RebateRate'
            - '$ref': '#/components/schemas/FeeRate'
        lastUpdateDatetime:
          type: string
          format: date-time
      required:
        - rerateId
        - contractId
        - status
        - rate
        - rerate
        - lastUpdateDatetime
    RerateProposal:
      type: object
      properties:
        contractId:
          '$ref': '#/components/schemas/ContractId'
        rate:
          oneOf:
            - '$ref': '#/components/schemas/RebateRate'
            - '$ref': '#/components/schemas/FeeRate'
      required:
        - contractId
        - rate
    Rerates:
      type: array
      items:
        '$ref': '#/components/schemas/Rerate'
    BuyinId:
      description: 'The unique identifier of a buyin - UUID'
      type: string
    Buyin:
      type: object
      properties:
        buyinId:
          '$ref': '#/components/schemas/BuyinId'
        contractId:
          '$ref': '#/components/schemas/ContractId'
        status:
          '$ref': '#/components/schemas/ContractStatus'
        quantity:
          '$ref': '#/components/schemas/Quantity'
        lastUpdateDatetime:
          type: string
          format: date-time
      required:
        - buyinId
        - contractId
        - status
        - quantity
        - lastUpdateDatetime
    Buyins:
      type: array
      items:
        '$ref': '#/components/schemas/Buyin'
    AutoRerate:
      type: object
      properties:
        effectiveDateDelay:
          type: number
          format: int32
    RebateRate:
      type: object
      properties:
        rebate:
          '$ref': '#/components/schemas/RebateRateDef'
    RebateRateDef:
      type: object
      properties:
        rateType:
          '$ref': '#/components/schemas/RateTypeCd'
        benchmark:
          '$ref': '#/components/schemas/BenchmarkCd'
        baseRate:
          type: number
          format: float
        spread:
          type: number
          format: float
        effectiveRate:
          type: number
          format: float
        isAutoRerate:
          type: boolean
        authoRerate:
          '$ref': '#/components/schemas/AutoRerate'
        effectiveDate:
          type: string
          format: date
        cutoffTime:
          type: string
          format: date-time
      required:
        - rateType
        - baseRate
    FeeRate:
      type: object
      properties:
        fee:
          '$ref': '#/components/schemas/FeeRateDef'
    FeeRateDef:
      type: object
      properties:
        baseRate:
          type: number
          format: float
        effectiveDate:
          type: string
          format: date
      required:
        - baseRate
    VenueType:
      type: string
      enum:
        - ONPLATFORM
        - OFFPLATFORM
    Venue:
      type: object
      properties:
        type:
          '$ref': '#/components/schemas/VenueType'
        platform:
          '$ref': '#/components/schemas/Platform'
        venueParties:
          '$ref': '#/components/schemas/VenueParties'
      required:
        - name
    Platform:
      type: object
      properties:
        gleifLei:
          type: string
        legalName:
          type: string
        mic:
          type: string
        venueName:
          type: string
        venueRefId:
          type: string
        transactionDatetime:
          type: string
          format: date-time
      required:
        - gleifLei
    PartyRole:
      type: string
      enum:
        - BORROWER
        - LENDER
        - TRIPARTY
        - CCP
    PartyId:
      description: 'The unique identifier of a party - UUID'
      type: string
    Party:
      type: object
      properties:
        partyId:
          '$ref': '#/components/schemas/PartyId'
        partyName:
          type: string
        gleifLei:
          type: string
        internalPartyId:
          type: string
      required:
        - gleifLei
    Parties:
      type: array
      items:
        '$ref': '#/components/schemas/Party'
    TransactingParty:
      type: object
      properties:
        partyRole:
          '$ref': '#/components/schemas/PartyRole'
        party:
          '$ref': '#/components/schemas/Party'
    TransactingParties:
      type: array
      items:
        '$ref': '#/components/schemas/TransactingParty'
    VenueParty:
      type: object
      properties:
        partyRole:
          '$ref': '#/components/schemas/PartyRole'
        venuePartyRefKey:
          type: string
        internalRef:
          '$ref': '#/components/schemas/InternalReference'
      required:
        - partyRole
    VenueParties:
      type: array
      items:
        '$ref': '#/components/schemas/VenueParty'
    InternalReference:
      type: object
      properties:
        brokerCd:
          type: string
        accountId:
          type: string
        internalRefId:
          type: string
      required:
        - internalReferenceId
    InternalReferenceUpdate:
      type: object
      properties:
        internalRef:
          '$ref': '#/components/schemas/InternalReference'
      required:
        - internalRef
    SettlementStatusUpdate:
      type: object
      properties:
        settlementStatus:
          '$ref': '#/components/schemas/SettlementStatus'
      required:
        - internalRef
    LocalMarketField:
      type: object
      properties:
        localFieldName:
          type: string
          description: Local market field Name
        localFieldValue:
          type: string
          description: Local market field value
    Settlement:
      type: object
      properties:
        roundingRule:
          type: number
          format: float
        roundingMode:
          '$ref': '#/components/schemas/RoundingMode'
        instructions:
          type: array
          items:
            '$ref': '#/components/schemas/PartySettlementInstruction'
    PartySettlementInstruction:
      type: object
      properties:
        partyRole:
          '$ref': '#/components/schemas/PartyRole'
        instruction:
          '$ref': '#/components/schemas/SettlementInstruction'
    SettlementInstruction:
      type: object
      properties:
        settlementBic:
          type: string
          description: Business Identifier Code (BIC) used to identify Place of Settlement (PSET)
        localAgentBic:
          type: string
          description: BIC used to identify local agent that will interact with PSET
        localAgentName:
          type: string
          description: Name of local agent that will interact with PSET
        localAgentAcct:
          type: string
          description: Account within local agent that will interact with PSET
        localMarketFields:
          type: array
          items:
            '$ref': '#/components/schemas/LocalMarketField'
      required:
        - settlementBic
        - localAgentBic
        - localAgentName
        - localAgentAcct
    SettlementInstructionUpdate:
      type: object
      properties:
        settlement:
          '$ref': '#/components/schemas/PartySettlementInstruction'
      required:
        - settlement
    Quantity:
      type: number
      format: int32
    PriceUnit:
      type: string
      enum:
        - SHARE
        - LOT
    Price:
      type: object
      properties:
        value:
          type: number
          format: float
        currency:
          '$ref': '#/components/schemas/CurrencyCd'
        unit:
          '$ref': '#/components/schemas/PriceUnit'
      required:
        - original
    Collateral:
      type: object
      properties:
        contractPrice:
          type: number
          format: double
        contractValue:
          type: number
          format: double
        collateralValue:
          type: number
          format: double
        currency:
          '$ref': '#/components/schemas/CurrencyCd'
        type:
          '$ref': '#/components/schemas/CollateralType'
        descriptionCd:
          '$ref': '#/components/schemas/CollateralDescription'
        margin:
          type: integer
          format: int32
      required:
        - currency
        - type
    LedgerResponse:
      type: object
      required:
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        message:
          type: string
        path:
          type: string
  requestBodies:
    Party:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Party'
      description: Define a new party on the ledger
      required: true
    TradeAgreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TradeAgreement'
      description: Agreement from a execution venue introduced to the ledger
      required: true
    ContractProposal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractProposal'
      description: New contract proposed for inclusion in the ledger
      required: true
    SettlementInstructionUpdate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SettlementInstructionUpdate'
      description: New contract proposed for inclusion in the ledger
      required: true
    RerateProposal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RerateProposal'
      description: New rerate proposed against contract
      required: true
  responses:
    Success:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
      description: Operation was successful
    BadRequest:
      description: Bad request or more information needed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
    Unauthorized:
      description: Not authorized to do this operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
    Conflict:
      description: Conflict with the state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
    NotAllowed:
      description: Operation not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
    Error:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerResponse'
  securitySchemes:
    1sourceBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    AgreementId:
      schema:
        description: 'The unique identifier of a trade agreement - UUID'
        type: string
    ContractId:
      schema:
        description: 'The unique identifier of a contract - UUID'
        type: string
    ReturnId:
      schema:
        description: 'The unique identifier of a return - UUID'
        type: string
    RecallId:
      schema:
        description: 'The unique identifier of a recall - UUID'
        type: string
    RerateId:
      schema:
        description: 'The unique identifier of a rerate - UUID'
        type: string
    BuyinId:
      schema:
        description: 'The unique identifier of a buyin - UUID'
        type: string
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/1SOURCE/1SOURCE-LEDGER-API/1.0.3
  - description: Demo API server
    url: http://demoapi.1sourceeq.com/v1