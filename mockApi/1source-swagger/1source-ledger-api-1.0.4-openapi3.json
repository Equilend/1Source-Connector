{
    "openapi": "3.0.0",
    "info": {
        "description": "1Source Ledger API provides client access to the 1Source Ledger. You can find\nout more about 1Source at\n[https://equilend.com](https://equilend.com).\n\nThis specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.\n\nAPI specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way.\n",
        "version": "1.0.4",
        "title": "1Source Ledger API",
        "termsOfService": "https://equilend.com/terms-and-conditions/",
        "contact": {
            "email": "1source_help@equilend.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "parties",
            "description": "Read the set of registered trading parties"
        },
        {
            "name": "delegations",
            "description": "Set of parties with delegated authorities"
        },
        {
            "name": "events",
            "description": "Read contract events"
        },
        {
            "name": "agreements",
            "description": "Execution venue trade agreements either on or off platform"
        },
        {
            "name": "contracts",
            "description": "Manage contracts on the ledger"
        },
        {
            "name": "rerates",
            "description": "Propose, approve, decline a contract rerate"
        },
        {
            "name": "returns",
            "description": "Initiate and manage a return on a contract"
        },
        {
            "name": "recalls",
            "description": "Initiate and manage a recall on a contract"
        },
        {
            "name": "buyins",
            "description": "Initiate and manage a buyin on a contract"
        }
    ],
    "paths": {
        "/ledger/parties": {
            "get": {
                "tags": [
                    "parties"
                ],
                "summary": "Read a collection of registered trading parties.",
                "security": [
                    {
                        "stage_auth": [
                            "read_access"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Parties",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Parties"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/parties/{partyId}": {
            "parameters": [
                {
                    "name": "partyId",
                    "description": "The unique identifier of a party",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/PartyId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "parties"
                ],
                "summary": "Read a party",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The party corresponding to the provided \"partyId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Party"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/delegations": {
            "get": {
                "tags": [
                    "delegations"
                ],
                "summary": "Read a collection of delegations.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Delegations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Delegations"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "delegations"
                ],
                "summary": "Delegate a set of workflows to a party",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Delegate"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/Success"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/delegations/{delegationId}": {
            "parameters": [
                {
                    "name": "delegationId",
                    "description": "The unique identifier of a party delegation",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/DelegationId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "delegations"
                ],
                "summary": "Read a party delegation",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The party delegation corresponding to the provided \"delegationId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Delegation"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/delegations/{delegationId}/approve": {
            "parameters": [
                {
                    "name": "delegationId",
                    "description": "The unique identifier of a party delegation",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/DelegationId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "delegations"
                ],
                "summary": "Approve a party delegation in \"proposed\" state",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/delegations/{delegationId}/cancel": {
            "parameters": [
                {
                    "name": "delegationId",
                    "description": "The unique identifier of a party delegation",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/DelegationId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "delegations"
                ],
                "summary": "Cancel a party delegation in \"proposed\" state. Original proposer only.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/delegations/{delegationId}/decline": {
            "parameters": [
                {
                    "name": "delegationId",
                    "description": "The unique identifier of a party delegation",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/DelegationId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "delegations"
                ],
                "summary": "Decline a party delegation in \"proposed\" state",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/agreements": {
            "get": {
                "tags": [
                    "agreements"
                ],
                "summary": "Read a collection of trade agreements. Defaults to return the last 100 trade agreeements created.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Agreements created (since) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Agreements created (before) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of agreements to be returned. Can be used to facilitate paging",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of trade agreements",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agreements"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "agreements"
                ],
                "summary": "Create a trade agreement",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/TradeAgreement"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/agreements/{agreementId}": {
            "parameters": [
                {
                    "name": "agreementId",
                    "description": "The unique identifier of a trade agreement",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/AgreementId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "agreements"
                ],
                "summary": "Read an agreement",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The trade agreement corresponding to the provided \"agreementId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agreement"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts": {
            "get": {
                "tags": [
                    "contracts"
                ],
                "summary": "Read a collection of contracts. Defaults to return the last 100 contracts created.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Contracts created (since) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Contracts created (before) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of contracts to be returned. Can be used to facilitate paging",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "contractStatus",
                        "schema": {
                            "$ref": "#/components/schemas/ContractStatus"
                        },
                        "description": "Contracts with status matching CONTRACT STATUS",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "figi",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Contracts with instrument matching FIGI",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sedol",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Contracts with instrument matching SEDOL",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "cusip",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Contracts with instrument matching CUSIP",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "ticker",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Contracts with instrument matching TICKER",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "isin",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Contracts with instrument matching ISIN",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "internalRefId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Contracts with internalRef:internalRefId matching INTERNAL REF ID",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "partyId",
                        "schema": {
                            "$ref": "#/components/schemas/PartyId"
                        },
                        "description": "Contracts with a transacting party mathing PARTY ID",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contracts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contracts"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "contracts"
                ],
                "summary": "Create a contract in \"proposal\" state. Normally done by the Lend side",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ContractProposal"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "contracts"
                ],
                "summary": "Read a specific contract the user is authorized to access",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contract corresponding to the provided \"contractId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contract"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "contracts"
                ],
                "summary": "Update unilateral fields in a contract",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SettlementStatusUpdate"
                                    },
                                    {
                                        "$ref": "#/components/schemas/SettlementInstructionUpdate"
                                    },
                                    {
                                        "$ref": "#/components/schemas/InternalReferenceUpdate"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/approve": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "contracts"
                ],
                "summary": "Approve a contract in \"proposed\" state",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ContractProposalApproval"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/cancel": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "contracts"
                ],
                "summary": "Cancel a contract in \"proposed\" state. Original proposer only.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/cancelpending": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "contracts"
                ],
                "summary": "Cancel a contract in \"pending\" state. Either party can initiate.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/decline": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "contracts"
                ],
                "summary": "Decline a contract in \"proposed\" state",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/history": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "contracts"
                ],
                "summary": "Return an ordered history of this contract. Each contract has a reference event that triggered a new version.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Events (since) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Events (before) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Number of events to be returned. Can be used to facilitate paging",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contracts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contracts"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/split": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "contracts"
                ],
                "summary": "Split an open contract into multiple lots",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ContractSplitProposal"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/events": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "events"
                ],
                "summary": "Read collection of events against a specific contract. With no parameters returns events since start of current day.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/EventType"
                            }
                        },
                        "description": "Filter by event type",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fromEventId",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Events (since) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Events (before) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Number of events to be returned. Can be used to facilitate paging",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Events"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/events/{eventId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "eventId",
                    "description": "The unique identifier of an Event",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/EventId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "events"
                ],
                "summary": "Read an event",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The event corresponding to the provided \"eventId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/returns": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "returns"
                ],
                "summary": "Read collection of returns against contract specified by 'contractId'",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of returns",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Returns"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "returns"
                ],
                "summary": "Create a return",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ReturnProposal"
                },
                "responses": {
                    "201": {
                        "description": "The return was created",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/ReturnId"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/returns/{returnId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "returnId",
                    "description": "The unique identifier of a return",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ReturnId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "returns"
                ],
                "summary": "Read a return",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The return corresponding to the provided \"returnId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Return"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "returns"
                ],
                "summary": "Update unilateral fields on a return",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/SettlementStatusUpdate"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/returns/{returnId}/acknowledge": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "returnId",
                    "description": "The unique identifier of a return",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ReturnId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "returns"
                ],
                "summary": "Acknowledge a pending return. No change to status.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ReturnAcknowledgement"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/returns/{returnId}/cancel": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "returnId",
                    "description": "The unique identifier of a return",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ReturnId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "returns"
                ],
                "summary": "Cancel a return in \"proposed\" or \"pending\" state. Original proposer only.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/recalls": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "recalls"
                ],
                "summary": "Read collection of recalls against contract specified by 'contractId'",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recalls",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recalls"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "recalls"
                ],
                "summary": "Create a recall",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecallProposal"
                },
                "responses": {
                    "201": {
                        "description": "The recall was created",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/RecallId"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/recalls/{recallId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "recallId",
                    "description": "The unique identifier of a recall",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RecallId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "recalls"
                ],
                "summary": "Read a recall",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The recall corresponding to the provided \"recallId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recall"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/recalls/{recallId}/cancel": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "recallId",
                    "description": "The unique identifier of a recall",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RecallId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "recalls"
                ],
                "summary": "Cancel a recall in \"proposed\" state. Original proposer only.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/rerates": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "rerates"
                ],
                "summary": "Read collection of rerates against contract specified by 'contractId'",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rerates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rerates"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "rerates"
                ],
                "summary": "Create a rerate",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/RerateProposal"
                },
                "responses": {
                    "201": {
                        "description": "The rerate was created",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/RerateId"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/rerates/{rerateId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "rerateId",
                    "description": "The unique identifier of a rerate",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RerateId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "rerates"
                ],
                "summary": "Read a rerate",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The rerate corresponding to the provided \"rerateId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rerate"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/rerates/{rerateId}/approve": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "rerateId",
                    "description": "The unique identifier of a rerate",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RerateId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "rerates"
                ],
                "summary": "Approve a rerate in \"proposed\" state.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/rerates/{rerateId}/cancel": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "rerateId",
                    "description": "The unique identifier of a rerate",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RerateId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "rerates"
                ],
                "summary": "Cancel a rerate in \"proposed\" state. Original proposer only.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/rerates/{rerateId}/cancelpending": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "rerateId",
                    "description": "The unique identifier of a rerate",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RerateId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "rerates"
                ],
                "summary": "Cancel a rerate in \"pending\" state. Either party can initiate.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/rerates/{rerateId}/decline": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "rerateId",
                    "description": "The unique identifier of a rerate",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RerateId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "rerates"
                ],
                "summary": "Decline a rerate in \"proposed\" state.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/buyins/initiates": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read collection of initiated buyins against contract specified by 'contractId'",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of initiated buyins",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinInitiates"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "buyins"
                ],
                "summary": "Initiate a buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyinInitiateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The buyin was initiated",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/BuyinInitiateId"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/buyins/completes": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read collection of completed buyins against contract specified by 'contractId'",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of completed buyins",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinCompletes"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "buyins"
                ],
                "summary": "Complete a buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyinCompleteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The buyin was completed",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/BuyinCompleteId"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/buyins/initiates/{buyinInitiateId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "buyinInitiateId",
                    "description": "The unique identifier of an initiated buyin",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BuyinInitiateId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read an initiated buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The initiated buyin corresponding to the provided \"buyinInitiateId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinInitiate"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/buyins/initiates/{buyinInitiateId}/cancel": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "buyinInitiateId",
                    "description": "The unique identifier of an initiated buyin",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BuyinInitiateId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "buyins"
                ],
                "summary": "Cancel an initiated buyin. Original proposer only.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/buyins/completes/{buyinCompleteId}": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "buyinCompleteId",
                    "description": "The unique identifier of a completed buyin",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BuyinCompleteId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read a completed Buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The completed buyin corresponding to the provided \"buyinCompleteId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinComplete"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/contracts/{contractId}/buyins/completes/{buyinCompleteId}/accept": {
            "parameters": [
                {
                    "name": "contractId",
                    "description": "The unique identifier of a contract",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ContractId"
                    }
                },
                {
                    "name": "buyinCompleteId",
                    "description": "The unique identifier of a completed buyin",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BuyinCompleteId"
                    }
                }
            ],
            "post": {
                "tags": [
                    "buyins"
                ],
                "summary": "Complete some or all of an initiated Buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/events": {
            "get": {
                "tags": [
                    "events"
                ],
                "summary": "Read collection of events. With no parameters returns events since start of current day.",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/EventType"
                            }
                        },
                        "description": "Filter by event type",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fromEventId",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Events (since) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Events (before) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of events to be returned. Can be used to facilitate paging. Defaults to 100",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Events"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/events/{eventId}": {
            "parameters": [
                {
                    "name": "eventId",
                    "description": "The unique identifier of an event",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/EventId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "events"
                ],
                "summary": "Read an event",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The event corresponding to the provided \"eventId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/returns": {
            "get": {
                "tags": [
                    "returns"
                ],
                "summary": "Read collection of returns",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of returns",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Returns"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/returns/{returnId}": {
            "parameters": [
                {
                    "name": "returnId",
                    "description": "The unique identifier of a return",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ReturnId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "returns"
                ],
                "summary": "Read a return",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The return corresponding to the provided \"returnId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Return"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/recalls": {
            "get": {
                "tags": [
                    "recalls"
                ],
                "summary": "Read collection of recalls",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recalls",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recalls"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/recalls/{recallId}": {
            "parameters": [
                {
                    "name": "recallId",
                    "description": "The unique identifier of a recall",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RecallId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "recalls"
                ],
                "summary": "Read a recall",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The recall corresponding to the provided \"recallId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recall"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/rerates": {
            "get": {
                "tags": [
                    "rerates"
                ],
                "summary": "Read collection of rerates",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Rerates created (since) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Rerates created (before) timestamp UTC",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of rerates to be returned. Can be used to facilitate paging",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "rerateStatus",
                        "schema": {
                            "$ref": "#/components/schemas/RerateStatus"
                        },
                        "description": "Contracts matching status RERATE STATUS",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "figi",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Rerates with instrument matching FIGI",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sedol",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Rerates with instrument matching SEDOL",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "cusip",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Rerates with instrument matching CUSIP",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "ticker",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Rerates with instrument matching TICKER",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "isin",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Rerates with instrument matching ISIN",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "partyId",
                        "schema": {
                            "$ref": "#/components/schemas/PartyId"
                        },
                        "description": "Rerates with a transacting party mathing PARTY ID",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rerates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rerates"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/rerates/{rerateId}": {
            "parameters": [
                {
                    "name": "rerateId",
                    "description": "The unique identifier of a rerate",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RerateId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "rerates"
                ],
                "summary": "Read a rerate",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The rerate corresponding to the provided \"rerateId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rerate"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/buyins/completes": {
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read collection of completed buyins",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of completed buyins",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinCompletes"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/buyins/completes/{buyinCompleteId}": {
            "parameters": [
                {
                    "name": "buyinCompleteId",
                    "description": "The unique identifier of a completed buyin",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BuyinCompleteId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read a completed buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The completed buyin corresponding to the provided \"buyinCompleteId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinComplete"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/buyins/initiates": {
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read collection of initiated buyins",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of initiated buyins",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinInitiates"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ledger/buyins/initiates/{buyinInitiateId}": {
            "parameters": [
                {
                    "name": "buyinInitiateId",
                    "description": "The unique identifier of an initiated buyin",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BuyinInitiateId"
                    }
                }
            ],
            "get": {
                "tags": [
                    "buyins"
                ],
                "summary": "Read an initiated buyin",
                "security": [
                    {
                        "stage_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The initiated buyin corresponding to the provided \"buyinInitiateId\"",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyinInitiate"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AcknowledgementType": {
                "type": "string",
                "enum": [
                    "POSITIVE",
                    "NEGATIVE"
                ]
            },
            "AgreementId": {
                "description": "The unique identifier of a trade agreement - UUID",
                "type": "string"
            },
            "Agreement": {
                "type": "object",
                "properties": {
                    "agreementId": {
                        "$ref": "#/components/schemas/AgreementId"
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "trade": {
                        "$ref": "#/components/schemas/TradeAgreement"
                    }
                },
                "required": [
                    "agreementId",
                    "status"
                ]
            },
            "Agreements": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Agreement"
                }
            },
            "BenchmarkCd": {
                "type": "string",
                "enum": [
                    "EFFR",
                    "OBFR",
                    "TGCR",
                    "BGCR",
                    "SOFR"
                ]
            },
            "BuyinComplete": {
                "type": "object",
                "properties": {
                    "buyinCompleteId": {
                        "$ref": "#/components/schemas/BuyinCompleteId"
                    },
                    "contractId": {
                        "$ref": "#/components/schemas/ContractId"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BuyinCompleteStatus"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "buyinDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "buyinCompleteId",
                    "contractId",
                    "status",
                    "quantity",
                    "lastUpdateDatetime"
                ]
            },
            "BuyinCompleteId": {
                "description": "The unique identifier of an initiated buyin - UUID",
                "type": "string"
            },
            "BuyinCompleteRequest": {
                "type": "object",
                "properties": {
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "buyinDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "required": [
                    "quantity"
                ]
            },
            "BuyinCompletes": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BuyinComplete"
                }
            },
            "BuyinCompleteStatus": {
                "type": "string",
                "enum": [
                    "PENDING",
                    "COMPLETE"
                ]
            },
            "BuyinInitiate": {
                "type": "object",
                "properties": {
                    "buyinIniitiateId": {
                        "$ref": "#/components/schemas/BuyinInitiateId"
                    },
                    "contractId": {
                        "$ref": "#/components/schemas/ContractId"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BuyinInitiateStatus"
                    },
                    "openQuantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "buyinInitiateId",
                    "contractId",
                    "status",
                    "openQuantity",
                    "lastUpdateDatetime"
                ]
            },
            "BuyinInitiateId": {
                "description": "The unique identifier of an initiated buyin - UUID",
                "type": "string"
            },
            "BuyinInitiateRequest": {
                "type": "object",
                "properties": {
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    }
                },
                "required": [
                    "quantity"
                ]
            },
            "BuyinInitiates": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BuyinInitiate"
                }
            },
            "BuyinInitiateStatus": {
                "type": "string",
                "enum": [
                    "OPEN",
                    "CANCELED",
                    "CLOSED"
                ]
            },
            "CdsCustomerUnitId": {
                "type": "string",
                "description": "CDS Customer Unit Identifier (of the local agent)"
            },
            "Collateral": {
                "type": "object",
                "properties": {
                    "contractPrice": {
                        "type": "number",
                        "format": "double"
                    },
                    "contractValue": {
                        "type": "number",
                        "format": "double"
                    },
                    "collateralValue": {
                        "type": "number",
                        "format": "double"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CurrencyCd"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CollateralType"
                    },
                    "descriptionCd": {
                        "$ref": "#/components/schemas/CollateralDescription"
                    },
                    "margin": {
                        "type": "integer",
                        "format": "double"
                    },
                    "roundingRule": {
                        "type": "number",
                        "format": "double"
                    },
                    "roundingMode": {
                        "$ref": "#/components/schemas/RoundingMode"
                    }
                },
                "required": [
                    "collateralValue",
                    "currency",
                    "type"
                ]
            },
            "CollateralDescription": {
                "type": "string",
                "enum": [
                    "NONUSAGENCIES",
                    "AGENCIES",
                    "CANADIANBONDS",
                    "CANADIANPROVINCIALS",
                    "CORPORATES",
                    "DEBT",
                    "EMUDEBTAAA",
                    "EMUDEBT",
                    "AUSTRALIANEQUITIES",
                    "EQUITIES",
                    "GOVTDEBT105",
                    "G10DEBT",
                    "G3DEBT",
                    "G8DEBT",
                    "UKGILTS",
                    "GOVERNMENTISSUES",
                    "GOVERNMENTISSUESAAA",
                    "HIGHGRADEEQUITIES",
                    "INVESTMENTGRADECORPORATES",
                    "JAPANESEGOVERNMENTBONDS"
                ]
            },
            "CollateralType": {
                "type": "string",
                "enum": [
                    "CASH",
                    "NONCASH",
                    "CASHPOOL",
                    "TRIPARTY"
                ]
            },
            "Contract": {
                "type": "object",
                "properties": {
                    "contractId": {
                        "$ref": "#/components/schemas/ContractId"
                    },
                    "lastEvent": {
                        "$ref": "#/components/schemas/Event"
                    },
                    "contractStatus": {
                        "$ref": "#/components/schemas/ContractStatus"
                    },
                    "lastUpdatePartyId": {
                        "$ref": "#/components/schemas/PartyId"
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "trade": {
                        "$ref": "#/components/schemas/TradeAgreement"
                    },
                    "settlement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PartySettlementInstruction"
                        }
                    }
                },
                "required": [
                    "contractId",
                    "status",
                    "lastUpdateDatetime"
                ]
            },
            "ContractId": {
                "description": "The unique identifier of a contract - UUID",
                "type": "string"
            },
            "ContractProposal": {
                "type": "object",
                "properties": {
                    "trade": {
                        "$ref": "#/components/schemas/TradeAgreement"
                    },
                    "settlement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PartySettlementInstruction"
                        }
                    }
                }
            },
            "ContractProposalApproval": {
                "type": "object",
                "properties": {
                    "internalRefId": {
                        "type": "string"
                    },
                    "roundingRule": {
                        "type": "number",
                        "format": "double"
                    },
                    "roundingMode": {
                        "$ref": "#/components/schemas/RoundingMode"
                    },
                    "settlement": {
                        "$ref": "#/components/schemas/PartySettlementInstruction"
                    }
                },
                "required": [
                    "internalRefId",
                    "settlement"
                ]
            },
            "Contracts": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Contract"
                }
            },
            "ContractSplitProposal": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ContractSplitLot"
                }
            },
            "ContractSplitLot": {
                "type": "object",
                "properties": {
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "internalRef": {
                        "$ref": "#/components/schemas/InternalReference"
                    }
                },
                "required": [
                    "original"
                ]
            },
            "ContractStatus": {
                "type": "string",
                "enum": [
                    "PROPOSED",
                    "PENDING",
                    "CANCEL_PENDING",
                    "CANCELED",
                    "DECLINED",
                    "OPEN",
                    "CLOSED",
                    "SPLIT_PENDING",
                    "SPLIT_DECLINED"
                ]
            },
            "CurrencyCd": {
                "type": "string",
                "enum": [
                    "USD",
                    "EUR",
                    "GBP",
                    "JPY",
                    "AUD",
                    "HKD",
                    "CAD",
                    "CHF",
                    "SEK",
                    "SGD",
                    "NOK",
                    "DKK"
                ]
            },
            "Delegation": {
                "type": "object",
                "properties": {
                    "venuePartyId": {
                        "$ref": "#/components/schemas/PartyId"
                    },
                    "counterPartyId": {
                        "$ref": "#/components/schemas/PartyId"
                    },
                    "authorizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DelegationAuthorization"
                        }
                    }
                },
                "required": [
                    "partyId",
                    "authorizations"
                ]
            },
            "DelegationAuthorization": {
                "type": "object",
                "properties": {
                    "authorizationType": {
                        "$ref": "#/components/schemas/DelegationAuthorizationType"
                    }
                },
                "required": [
                    "authorizationType"
                ]
            },
            "DelegationAuthorizationType": {
                "type": "string",
                "enum": [
                    "CONTRACTS",
                    "RETURNS",
                    "RECALLS",
                    "BUYINS"
                ]
            },
            "DelegationId": {
                "description": "The unique identifier of a party delegation",
                "type": "string"
            },
            "Delegations": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Delegation"
                }
            },
            "DtcPartipantNumber": {
                "type": "string",
                "description": "DTC Participant Number (of the Local Agent)"
            },
            "EventType": {
                "type": "string",
                "enum": [
                    "TRADE_AGREED",
                    "TRADE_CANCELED",
                    "CONTRACT_PROPOSED",
                    "CONTRACT_PENDING",
                    "CONTRACT_CANCELED",
                    "CONTRACT_CANCEL_PENDING",
                    "CONTRACT_CLOSED",
                    "CONTRACT_DECLINED",
                    "CONTRACT_OPENED",
                    "CONTRACT_ALLOCATION",
                    "CONTRACT_SPLIT",
                    "SETTLEMENT_STATUS_UPDATE",
                    "SETTLEMENT_INSTRUCTION_UPDATE",
                    "RERATE_PROPOSED",
                    "RERATE_PENDING",
                    "RERATE_CANCELED",
                    "RERATE_CANCEL_PENDING",
                    "RERATE_DECLINED",
                    "RERATE_APPLIED",
                    "RETURN_PENDING",
                    "RETURN_SETTLED",
                    "RETURN_CANCELED",
                    "RECALL_OPEN",
                    "RECALL_UPDATED",
                    "RECALL_CANCELED",
                    "RECALL_CLOSED",
                    "BUYIN_OPENED",
                    "BUYIN_CANCELED",
                    "BUYIN_CLOSED",
                    "BUYIN_COMPLETED",
                    "BUYIN_PENDING",
                    "BUYIN_UPDATED",
                    "DELEGATION_PROPOSED",
                    "DELEGATION_APPROVED",
                    "DELEGATION_CANCELED"
                ]
            },
            "EventId": {
                "description": "The unique identifier of an event - UUID",
                "type": "integer"
            },
            "Event": {
                "type": "object",
                "properties": {
                    "eventId": {
                        "$ref": "#/components/schemas/EventId"
                    },
                    "eventType": {
                        "$ref": "#/components/schemas/EventType"
                    },
                    "eventDatetime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "resourceUri": {
                        "type": "string"
                    }
                },
                "required": [
                    "eventId",
                    "eventType"
                ]
            },
            "Events": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Event"
                }
            },
            "FeeRate": {
                "type": "object",
                "properties": {
                    "fee": {
                        "$ref": "#/components/schemas/FixedRateDef"
                    }
                }
            },
            "FixedRate": {
                "type": "object",
                "properties": {
                    "fixed": {
                        "$ref": "#/components/schemas/FixedRateDef"
                    }
                }
            },
            "FixedRateDef": {
                "type": "object",
                "properties": {
                    "baseRate": {
                        "type": "number",
                        "format": "double"
                    },
                    "effectiveRate": {
                        "type": "number",
                        "format": "double"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "cutoffTime": {
                        "type": "string",
                        "pattern": "([01]?[0-9]|2[0-3]):[0-5][0-9]"
                    }
                },
                "required": [
                    "baseRate"
                ]
            },
            "FloatingRate": {
                "type": "object",
                "properties": {
                    "floating": {
                        "$ref": "#/components/schemas/FloatingRateDef"
                    }
                }
            },
            "FloatingRateDef": {
                "type": "object",
                "properties": {
                    "benchmark": {
                        "$ref": "#/components/schemas/BenchmarkCd"
                    },
                    "baseRate": {
                        "type": "number",
                        "format": "double"
                    },
                    "spread": {
                        "type": "number",
                        "format": "double"
                    },
                    "effectiveRate": {
                        "type": "number",
                        "format": "double"
                    },
                    "isAutoRerate": {
                        "type": "boolean"
                    },
                    "effectiveDateDelay": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "cutoffTime": {
                        "type": "string",
                        "pattern": "([01]?[0-9]|2[0-3]):[0-5][0-9]"
                    }
                },
                "required": [
                    "rateType",
                    "baseRate"
                ]
            },
            "Instrument": {
                "type": "object",
                "properties": {
                    "ticker": {
                        "type": "string"
                    },
                    "cusip": {
                        "type": "string"
                    },
                    "isin": {
                        "type": "string"
                    },
                    "sedol": {
                        "type": "string"
                    },
                    "quick": {
                        "type": "string"
                    },
                    "figi": {
                        "type": "string"
                    },
                    "marketCd": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "required": [
                    "figi"
                ]
            },
            "InternalReference": {
                "type": "object",
                "properties": {
                    "brokerCd": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "internalRefId": {
                        "type": "string"
                    }
                },
                "required": [
                    "internalRefId"
                ]
            },
            "InternalReferenceUpdate": {
                "type": "object",
                "properties": {
                    "internalRef": {
                        "$ref": "#/components/schemas/InternalReference"
                    }
                },
                "required": [
                    "internalRef"
                ]
            },
            "LedgerResponse": {
                "type": "object",
                "required": [
                    "message"
                ],
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                }
            },
            "LocalVenueField": {
                "type": "object",
                "properties": {
                    "localFieldName": {
                        "type": "string",
                        "description": "Local market field Name"
                    },
                    "localFieldValue": {
                        "type": "string",
                        "description": "Local market field value"
                    }
                }
            },
            "Parties": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Party"
                }
            },
            "Party": {
                "type": "object",
                "properties": {
                    "partyId": {
                        "$ref": "#/components/schemas/PartyId"
                    },
                    "partyName": {
                        "type": "string"
                    },
                    "gleifLei": {
                        "type": "string"
                    },
                    "internalPartyId": {
                        "type": "string"
                    }
                },
                "required": [
                    "gleifLei"
                ]
            },
            "PartyId": {
                "description": "The unique identifier of a party - UUID",
                "type": "string"
            },
            "PartyRole": {
                "type": "string",
                "enum": [
                    "BORROWER",
                    "LENDER",
                    "TRIPARTY",
                    "CCP"
                ]
            },
            "PartySettlementInstruction": {
                "type": "object",
                "properties": {
                    "partyRole": {
                        "$ref": "#/components/schemas/PartyRole"
                    },
                    "settlementStatus": {
                        "$ref": "#/components/schemas/SettlementStatus"
                    },
                    "internalAcctCd": {
                        "type": "string"
                    },
                    "instruction": {
                        "$ref": "#/components/schemas/SettlementInstruction"
                    }
                }
            },
            "Price": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "double"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CurrencyCd"
                    },
                    "unit": {
                        "$ref": "#/components/schemas/PriceUnit"
                    },
                    "valueDate": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "original"
                ]
            },
            "PriceUnit": {
                "type": "string",
                "enum": [
                    "SHARE",
                    "LOT"
                ]
            },
            "Quantity": {
                "type": "integer",
                "format": "int32"
            },
            "RebateRate": {
                "type": "object",
                "properties": {
                    "rebate": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FixedRate"
                            },
                            {
                                "$ref": "#/components/schemas/FloatingRate"
                            }
                        ]
                    }
                }
            },
            "RecallId": {
                "description": "The unique identifier of a recall - UUID",
                "type": "string"
            },
            "Recall": {
                "type": "object",
                "properties": {
                    "recallId": {
                        "$ref": "#/components/schemas/RecallId"
                    },
                    "contractId": {
                        "$ref": "#/components/schemas/ContractId"
                    },
                    "status": {
                        "$ref": "#/components/schemas/RecallStatus"
                    },
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "openQuantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "recallId",
                    "contractId",
                    "status",
                    "quantity",
                    "lastUpdateDatetime"
                ]
            },
            "RecallProposal": {
                "type": "object",
                "properties": {
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "collateral": {
                        "$ref": "#/components/schemas/Collateral"
                    }
                },
                "required": [
                    "quantity"
                ]
            },
            "Recalls": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Recall"
                }
            },
            "RecallStatus": {
                "type": "string",
                "enum": [
                    "OPEN",
                    "CLOSED",
                    "CANCELED"
                ]
            },
            "Rerate": {
                "type": "object",
                "properties": {
                    "rerateId": {
                        "$ref": "#/components/schemas/RerateId"
                    },
                    "contractId": {
                        "$ref": "#/components/schemas/ContractId"
                    },
                    "status": {
                        "$ref": "#/components/schemas/RerateStatus"
                    },
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "rate": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RebateRate"
                            },
                            {
                                "$ref": "#/components/schemas/FeeRate"
                            }
                        ]
                    },
                    "rerate": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RebateRate"
                            },
                            {
                                "$ref": "#/components/schemas/FeeRate"
                            }
                        ]
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "rerateId",
                    "contractId",
                    "status",
                    "rate",
                    "rerate",
                    "lastUpdateDatetime"
                ]
            },
            "RerateId": {
                "description": "The unique identifier of a rerate - UUID",
                "type": "string"
            },
            "RerateProposal": {
                "type": "object",
                "properties": {
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "rate": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RebateRate"
                            },
                            {
                                "$ref": "#/components/schemas/FeeRate"
                            }
                        ]
                    }
                },
                "required": [
                    "contractId",
                    "rate"
                ]
            },
            "Rerates": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Rerate"
                }
            },
            "RerateStatus": {
                "type": "string",
                "enum": [
                    "PROPOSED",
                    "PENDING",
                    "CANCEL_PENDING",
                    "CANCELED",
                    "APPLIED"
                ]
            },
            "Return": {
                "type": "object",
                "properties": {
                    "returnId": {
                        "$ref": "#/components/schemas/ReturnId"
                    },
                    "contractId": {
                        "$ref": "#/components/schemas/ContractId"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ReturnStatus"
                    },
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "collateral": {
                        "$ref": "#/components/schemas/Collateral"
                    },
                    "settlement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PartySettlementInstruction"
                        }
                    },
                    "lastUpdateDatetime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "contractId",
                    "status",
                    "quantity",
                    "lastUpdateDatetime"
                ]
            },
            "ReturnAcknowledgement": {
                "type": "object",
                "properties": {
                    "acknowledgementType": {
                        "$ref": "#/components/schemas/AcknowledgementType"
                    },
                    "description": {
                        "type": "string"
                    },
                    "settlement": {
                        "$ref": "#/components/schemas/PartySettlementInstruction"
                    }
                },
                "required": [
                    "acknowledgementType"
                ]
            },
            "ReturnId": {
                "description": "The unique identifier of a return - UUID",
                "type": "string"
            },
            "ReturnProposal": {
                "type": "object",
                "properties": {
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "returnDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "returnSettlementDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "collateral": {
                        "$ref": "#/components/schemas/Collateral"
                    },
                    "settlement": {
                        "$ref": "#/components/schemas/PartySettlementInstruction"
                    }
                },
                "required": [
                    "quantity"
                ]
            },
            "Returns": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Return"
                }
            },
            "ReturnStatus": {
                "type": "string",
                "enum": [
                    "PENDING",
                    "CANCELED",
                    "SETTLED"
                ]
            },
            "RoundingMode": {
                "type": "string",
                "enum": [
                    "ALWAYSUP",
                    "ALWAYSDOWN",
                    "STANDARD",
                    "EXACT"
                ]
            },
            "SettlementInstruction": {
                "type": "object",
                "properties": {
                    "settlementBic": {
                        "type": "string",
                        "description": "Business Identifier Code (BIC) used to identify Place of Settlement (PSET)"
                    },
                    "localAgentBic": {
                        "type": "string",
                        "description": "BIC used to identify local agent that will interact with PSET"
                    },
                    "localAgentName": {
                        "type": "string",
                        "description": "Name of local agent that will interact with PSET"
                    },
                    "localAgentAcct": {
                        "type": "string",
                        "description": "Account within local agent that will interact with PSET"
                    },
                    "dtcParticipantNumber": {
                        "$ref": "#/components/schemas/DtcPartipantNumber"
                    },
                    "cdsCustomerUnitId": {
                        "$ref": "#/components/schemas/CdsCustomerUnitId"
                    },
                    "custodianName": {
                        "type": "string",
                        "description": "Custodian Bank Name"
                    },
                    "custodianBic": {
                        "type": "string",
                        "description": "Custodian Bank BIC"
                    },
                    "custodianAcct": {
                        "type": "string",
                        "description": "Custodian Bank Account"
                    }
                },
                "required": [
                    "settlementBic",
                    "localAgentAcct"
                ],
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DtcPartipantNumber"
                    },
                    {
                        "$ref": "#/components/schemas/CdsCustomerUnitId"
                    }
                ]
            },
            "SettlementInstructionUpdate": {
                "type": "object",
                "properties": {
                    "settlement": {
                        "$ref": "#/components/schemas/PartySettlementInstruction"
                    }
                },
                "required": [
                    "settlement"
                ]
            },
            "SettlementStatus": {
                "type": "string",
                "enum": [
                    "NONE",
                    "PENDING",
                    "SETTLED"
                ]
            },
            "SettlementStatusUpdate": {
                "type": "object",
                "properties": {
                    "settlementStatus": {
                        "$ref": "#/components/schemas/SettlementStatus"
                    }
                },
                "required": [
                    "settlementStatus"
                ]
            },
            "SettlementType": {
                "type": "string",
                "enum": [
                    "DVP",
                    "FOP"
                ]
            },
            "TermType": {
                "type": "string",
                "enum": [
                    "OPEN",
                    "TERM"
                ]
            },
            "TradeAgreement": {
                "type": "object",
                "properties": {
                    "executionVenue": {
                        "$ref": "#/components/schemas/Venue"
                    },
                    "instrument": {
                        "$ref": "#/components/schemas/Instrument"
                    },
                    "rate": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RebateRate"
                            },
                            {
                                "$ref": "#/components/schemas/FeeRate"
                            }
                        ]
                    },
                    "openQuantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "quantity": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "billingCurrency": {
                        "$ref": "#/components/schemas/CurrencyCd"
                    },
                    "dividendRatePct": {
                        "type": "number",
                        "format": "double"
                    },
                    "tradeDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "termType": {
                        "$ref": "#/components/schemas/TermType"
                    },
                    "termDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "settlementDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "settlementType": {
                        "$ref": "#/components/schemas/SettlementType"
                    },
                    "collateral": {
                        "$ref": "#/components/schemas/Collateral"
                    },
                    "transactingParties": {
                        "$ref": "#/components/schemas/TransactingParties"
                    }
                },
                "required": [
                    "instrument",
                    "rate",
                    "quantity",
                    "tradeDate",
                    "collateral",
                    "transactingParties"
                ]
            },
            "TransactingParty": {
                "type": "object",
                "properties": {
                    "partyRole": {
                        "$ref": "#/components/schemas/PartyRole"
                    },
                    "party": {
                        "$ref": "#/components/schemas/Party"
                    },
                    "internalRef": {
                        "$ref": "#/components/schemas/InternalReference"
                    }
                },
                "required": [
                    "internalRef"
                ]
            },
            "TransactingParties": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/TransactingParty"
                }
            },
            "Venue": {
                "type": "object",
                "properties": {
                    "partyId": {
                        "$ref": "#/components/schemas/PartyId"
                    },
                    "type": {
                        "$ref": "#/components/schemas/VenueType"
                    },
                    "venueName": {
                        "type": "string"
                    },
                    "venueRefKey": {
                        "type": "string"
                    },
                    "transactionDatetime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "venueParties": {
                        "$ref": "#/components/schemas/VenueParties"
                    },
                    "localVenueFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LocalVenueField"
                        }
                    }
                },
                "required": [
                    "name"
                ]
            },
            "VenueParty": {
                "type": "object",
                "properties": {
                    "partyRole": {
                        "$ref": "#/components/schemas/PartyRole"
                    },
                    "venuePartyRefKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "partyRole"
                ]
            },
            "VenueParties": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/VenueParty"
                }
            },
            "VenueType": {
                "type": "string",
                "enum": [
                    "ONPLATFORM",
                    "OFFPLATFORM"
                ]
            }
        },
        "requestBodies": {
            "ContractProposal": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ContractProposal"
                        }
                    }
                },
                "description": "New contract proposed for inclusion in the ledger",
                "required": true
            },
            "ContractProposalApproval": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ContractProposalApproval"
                        }
                    }
                },
                "description": "Update settlement instructions on an existing contract",
                "required": true
            },
            "ContractSplitProposal": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ContractSplitProposal"
                        }
                    }
                },
                "description": "Split proposed against contract",
                "required": true
            },
            "Delegate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Delegation"
                        }
                    }
                },
                "description": "Define a new venue delegate",
                "required": true
            },
            "Party": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Party"
                        }
                    }
                },
                "description": "Define a new party on the ledger",
                "required": true
            },
            "RerateProposal": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RerateProposal"
                        }
                    }
                },
                "description": "New rerate proposed against contract",
                "required": true
            },
            "RecallProposal": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecallProposal"
                        }
                    }
                },
                "description": "New recall proposed against contract",
                "required": true
            },
            "ReturnAcknowledgement": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ReturnAcknowledgement"
                        }
                    }
                },
                "description": "Acknowledge return with positive/negative intent",
                "required": true
            },
            "ReturnProposal": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ReturnProposal"
                        }
                    }
                },
                "description": "New return proposed against contract",
                "required": true
            },
            "SettlementInstructionUpdate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SettlementInstructionUpdate"
                        }
                    }
                },
                "description": "Update settlement instructions on an existing contract",
                "required": true
            },
            "TradeAgreement": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TradeAgreement"
                        }
                    }
                },
                "description": "Agreement from a execution venue introduced to the ledger",
                "required": true
            }
        },
        "responses": {
            "Success": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                },
                "description": "Operation was successful"
            },
            "Created": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                },
                "description": "Operation was successful"
            },
            "BadRequest": {
                "description": "Bad request or more information needed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                }
            },
            "Unauthorized": {
                "description": "Not authorized to do this operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                }
            },
            "NotFound": {
                "description": "Resource not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                }
            },
            "Conflict": {
                "description": "Conflict with the state of the resource",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                }
            },
            "NotAllowed": {
                "description": "Operation not allowed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                }
            },
            "Error": {
                "description": "An error occurred",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LedgerResponse"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "stage_auth": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://stageauth.equilend.com/auth/realms/1Source/protocol/openid-connect/auth",
                        "tokenUrl": "https://stageauth.equilend.com/auth/realms/1Source/protocol/openid-connect/token",
                        "scopes": {}
                    }
                }
            }
        },
        "headers": {
            "AgreementId": {
                "schema": {
                    "description": "The unique identifier of a trade agreement - UUID",
                    "type": "string"
                }
            },
            "BuyinCompleteId": {
                "schema": {
                    "description": "The unique identifier of a complete buyin - UUID",
                    "type": "string"
                }
            },
            "BuyinInitiateId": {
                "schema": {
                    "description": "The unique identifier of an initiated buyin - UUID",
                    "type": "string"
                }
            },
            "ContractId": {
                "schema": {
                    "description": "The unique identifier of a contract - UUID",
                    "type": "string"
                }
            },
            "ReturnId": {
                "schema": {
                    "description": "The unique identifier of a return - UUID",
                    "type": "string"
                }
            },
            "RecallId": {
                "schema": {
                    "description": "The unique identifier of a recall - UUID",
                    "type": "string"
                }
            },
            "RerateId": {
                "schema": {
                    "description": "The unique identifier of a rerate - UUID",
                    "type": "string"
                }
            }
        }
    },
    "servers": [
        {
            "description": "Staging API Server",
            "url": "https://stageapi.equilend.com/v1"
        },
        {
            "description": "SwaggerHub API Auto Mocking",
            "url": "https://virtserver.swaggerhub.com/1SOURCE/1SOURCE-LEDGER-API/1.0.4"
        }
    ]
}