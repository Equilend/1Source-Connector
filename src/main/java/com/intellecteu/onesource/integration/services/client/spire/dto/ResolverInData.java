/*
 * Spire-Trade-Service
 * Spire-Trade-REST-API
 *
 * OpenAPI spec version: 4.0
 * Contact: support.stonewain.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.intellecteu.onesource.integration.services.client.spire.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * ResolverInData
 */
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-23T11:29:17.054Z")
public class ResolverInData {
  @JsonProperty("isList")
  private Boolean isList = null;

  @JsonProperty("listChildren")
  private Map<String, ResolverInData> listChildren = null;

  @JsonProperty("resolverParameters")
  private BaseDTO resolverParameters = null;

  /**
   * Gets or Sets resolverType
   */
  public enum ResolverTypeEnum {
    ACCOUNT("ACCOUNT"),
    
    ACCOUNTACCOUNT("ACCOUNTACCOUNT"),
    
    ACCOUNT_TYPE("ACCOUNT_TYPE"),
    
    CURRENCY("CURRENCY"),
    
    DEPOSITORY("DEPOSITORY"),
    
    SECURITY("SECURITY"),
    
    SECURITY_REF("SECURITY_REF"),
    
    STATUS("STATUS"),
    
    USER("USER"),
    
    VSECURITY("VSECURITY"),
    
    SECURITYHIST("SECURITYHIST"),
    
    POSITIONTYPE("POSITIONTYPE"),
    
    TRADETYPE("TRADETYPE"),
    
    COLLATERALTYPE("COLLATERALTYPE"),
    
    RECALL_POSITION("RECALL_POSITION"),
    
    RECALL_ALLOCATION("RECALL_ALLOCATION"),
    
    LENDING_TO_OMNI("LENDING_TO_OMNI"),
    
    INDEX("INDEX"),
    
    ACCOUNT_TREE("ACCOUNT_TREE"),
    
    EXPOSURE("EXPOSURE"),
    
    BASIS("BASIS"),
    
    CORPACTIONTYPE("CORPACTIONTYPE"),
    
    CORPACTION("CORPACTION"),
    
    COUNTERPARTY_TO_RECALL("COUNTERPARTY_TO_RECALL"),
    
    POSITONREF_TO_POSITION("POSITONREF_TO_POSITION"),
    
    CALENDAR("CALENDAR"),
    
    COUNTERPARTY_FIRM("COUNTERPARTY_FIRM"),
    
    STRATEGY("STRATEGY"),
    
    ALLOCATION_REASON("ALLOCATION_REASON"),
    
    TRADING_DESK("TRADING_DESK"),
    
    LENDING_ACCOUNT("LENDING_ACCOUNT"),
    
    COLLATERAL_ACCOUNT("COLLATERAL_ACCOUNT"),
    
    CUSTODIAN_ACCOUNT("CUSTODIAN_ACCOUNT"),
    
    ACCOUNT_GROUP_ACCOUNT("ACCOUNT_GROUP_ACCOUNT"),
    
    ACCOUNT_GROUP_ACCOUNT_TO_LENDING_ACCOUNT("ACCOUNT_GROUP_ACCOUNT_TO_LENDING_ACCOUNT"),
    
    MATCH_GROUP("MATCH_GROUP"),
    
    POSITION_MATCH_GROUP("POSITION_MATCH_GROUP"),
    
    CATEGORY_TO_SECURITY("CATEGORY_TO_SECURITY"),
    
    RULE_TYPE("RULE_TYPE"),
    
    CATEGORY("CATEGORY"),
    
    COUNTRY("COUNTRY"),
    
    ISSUERCOUNTRY_TO_SECURITY("ISSUERCOUNTRY_TO_SECURITY"),
    
    CATEGORY_TO_CHILD_CATEGORY("CATEGORY_TO_CHILD_CATEGORY"),
    
    USER_ENTITLEMENT("USER_ENTITLEMENT"),
    
    RULE_STATUS("RULE_STATUS"),
    
    LEVEL2ACCOUNTGROUP("LEVEL2ACCOUNTGROUP"),
    
    STRATEGY_NAME_TO_LENDING_ACCOUNT("STRATEGY_NAME_TO_LENDING_ACCOUNT"),
    
    SUB_ACCOUNT_DETAIL_ACCOUNT("SUB_ACCOUNT_DETAIL_ACCOUNT"),
    
    WASH_AND_LENDING_ACCOUNT("WASH_AND_LENDING_ACCOUNT"),
    
    NOOP("NOOP"),
    
    LENDER_ACCOUNT("LENDER_ACCOUNT"),
    
    COUNTERPARTY_GROUP_ACCOUNT("COUNTERPARTY_GROUP_ACCOUNT"),
    
    MIC("MIC"),
    
    LEGAL_ENTITY_ACCOUNT_GROUP("LEGAL_ENTITY_ACCOUNT_GROUP"),
    
    CHILD_FIRM_ACCOUNT("CHILD_FIRM_ACCOUNT"),
    
    SECURITY_TO_CORPACTION("SECURITY_TO_CORPACTION"),
    
    SWIFT_BIC("SWIFT_BIC"),
    
    COUNTERPARTY("COUNTERPARTY"),
    
    MARKET_INDEX("MARKET_INDEX"),
    
    LENDABLE_VALUE("LENDABLE_VALUE"),
    
    NEW_OPPORTUNITY_COST("NEW_OPPORTUNITY_COST"),
    
    TOTAL_ONLENT_VALUE("TOTAL_ONLENT_VALUE"),
    
    DXDATA_FIELDS("DXDATA_FIELDS"),
    
    ACCOUNT_TO_COMPRESS_ACCOUNT("ACCOUNT_TO_COMPRESS_ACCOUNT");

    private String value;

    ResolverTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResolverTypeEnum fromValue(String value) {
      for (ResolverTypeEnum b : ResolverTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("resolverType")
  private ResolverTypeEnum resolverType = null;

  @JsonProperty("sourceKey")
  private String sourceKey = null;

  @JsonProperty("targetDefaultValue")
  private Object targetDefaultValue = null;

  @JsonProperty("targetKey")
  private String targetKey = null;

  @JsonProperty("targetPath")
  private String targetPath = null;

  public ResolverInData isList(Boolean isList) {
    this.isList = isList;
    return this;
  }

   /**
   * Get isList
   * @return isList
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsList() {
    return isList;
  }

  public void setIsList(Boolean isList) {
    this.isList = isList;
  }

  public ResolverInData listChildren(Map<String, ResolverInData> listChildren) {
    this.listChildren = listChildren;
    return this;
  }

  public ResolverInData putListChildrenItem(String key, ResolverInData listChildrenItem) {
    if (this.listChildren == null) {
      this.listChildren = new HashMap<>();
    }
    this.listChildren.put(key, listChildrenItem);
    return this;
  }

   /**
   * Get listChildren
   * @return listChildren
  **/
  @ApiModelProperty(value = "")
  public Map<String, ResolverInData> getListChildren() {
    return listChildren;
  }

  public void setListChildren(Map<String, ResolverInData> listChildren) {
    this.listChildren = listChildren;
  }

  public ResolverInData resolverParameters(BaseDTO resolverParameters) {
    this.resolverParameters = resolverParameters;
    return this;
  }

   /**
   * Get resolverParameters
   * @return resolverParameters
  **/
  @ApiModelProperty(value = "")
  public BaseDTO getResolverParameters() {
    return resolverParameters;
  }

  public void setResolverParameters(BaseDTO resolverParameters) {
    this.resolverParameters = resolverParameters;
  }

  public ResolverInData resolverType(ResolverTypeEnum resolverType) {
    this.resolverType = resolverType;
    return this;
  }

   /**
   * Get resolverType
   * @return resolverType
  **/
  @ApiModelProperty(value = "")
  public ResolverTypeEnum getResolverType() {
    return resolverType;
  }

  public void setResolverType(ResolverTypeEnum resolverType) {
    this.resolverType = resolverType;
  }

  public ResolverInData sourceKey(String sourceKey) {
    this.sourceKey = sourceKey;
    return this;
  }

   /**
   * Get sourceKey
   * @return sourceKey
  **/
  @ApiModelProperty(value = "")
  public String getSourceKey() {
    return sourceKey;
  }

  public void setSourceKey(String sourceKey) {
    this.sourceKey = sourceKey;
  }

  public ResolverInData targetDefaultValue(Object targetDefaultValue) {
    this.targetDefaultValue = targetDefaultValue;
    return this;
  }

   /**
   * Get targetDefaultValue
   * @return targetDefaultValue
  **/
  @ApiModelProperty(value = "")
  public Object getTargetDefaultValue() {
    return targetDefaultValue;
  }

  public void setTargetDefaultValue(Object targetDefaultValue) {
    this.targetDefaultValue = targetDefaultValue;
  }

  public ResolverInData targetKey(String targetKey) {
    this.targetKey = targetKey;
    return this;
  }

   /**
   * Get targetKey
   * @return targetKey
  **/
  @ApiModelProperty(value = "")
  public String getTargetKey() {
    return targetKey;
  }

  public void setTargetKey(String targetKey) {
    this.targetKey = targetKey;
  }

  public ResolverInData targetPath(String targetPath) {
    this.targetPath = targetPath;
    return this;
  }

   /**
   * Get targetPath
   * @return targetPath
  **/
  @ApiModelProperty(value = "")
  public String getTargetPath() {
    return targetPath;
  }

  public void setTargetPath(String targetPath) {
    this.targetPath = targetPath;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolverInData resolverInData = (ResolverInData) o;
    return Objects.equals(this.isList, resolverInData.isList) &&
        Objects.equals(this.listChildren, resolverInData.listChildren) &&
        Objects.equals(this.resolverParameters, resolverInData.resolverParameters) &&
        Objects.equals(this.resolverType, resolverInData.resolverType) &&
        Objects.equals(this.sourceKey, resolverInData.sourceKey) &&
        Objects.equals(this.targetDefaultValue, resolverInData.targetDefaultValue) &&
        Objects.equals(this.targetKey, resolverInData.targetKey) &&
        Objects.equals(this.targetPath, resolverInData.targetPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isList, listChildren, resolverParameters, resolverType, sourceKey, targetDefaultValue, targetKey, targetPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolverInData {\n");
    
    sb.append("    isList: ").append(toIndentedString(isList)).append("\n");
    sb.append("    listChildren: ").append(toIndentedString(listChildren)).append("\n");
    sb.append("    resolverParameters: ").append(toIndentedString(resolverParameters)).append("\n");
    sb.append("    resolverType: ").append(toIndentedString(resolverType)).append("\n");
    sb.append("    sourceKey: ").append(toIndentedString(sourceKey)).append("\n");
    sb.append("    targetDefaultValue: ").append(toIndentedString(targetDefaultValue)).append("\n");
    sb.append("    targetKey: ").append(toIndentedString(targetKey)).append("\n");
    sb.append("    targetPath: ").append(toIndentedString(targetPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

