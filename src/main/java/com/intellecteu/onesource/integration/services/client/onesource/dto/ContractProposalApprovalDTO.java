/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.4
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.intellecteu.onesource.integration.services.client.onesource.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;
/**
 * ContractProposalApprovalDTO
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-01-22T10:16:28.187392600Z[Europe/London]")

public class ContractProposalApprovalDTO {
  @JsonProperty("internalRefId")
  private String internalRefId = null;

  @JsonProperty("roundingRule")
  private Double roundingRule = null;

  @JsonProperty("roundingMode")
  private RoundingModeDTO roundingMode = null;

  @JsonProperty("settlement")
  private PartySettlementInstructionDTO settlement = null;

  public ContractProposalApprovalDTO internalRefId(String internalRefId) {
    this.internalRefId = internalRefId;
    return this;
  }

   /**
   * Get internalRefId
   * @return internalRefId
  **/
  @Schema(required = true, description = "")
  public String getInternalRefId() {
    return internalRefId;
  }

  public void setInternalRefId(String internalRefId) {
    this.internalRefId = internalRefId;
  }

  public ContractProposalApprovalDTO roundingRule(Double roundingRule) {
    this.roundingRule = roundingRule;
    return this;
  }

   /**
   * Get roundingRule
   * @return roundingRule
  **/
  @Schema(description = "")
  public Double getRoundingRule() {
    return roundingRule;
  }

  public void setRoundingRule(Double roundingRule) {
    this.roundingRule = roundingRule;
  }

  public ContractProposalApprovalDTO roundingMode(RoundingModeDTO roundingMode) {
    this.roundingMode = roundingMode;
    return this;
  }

   /**
   * Get roundingMode
   * @return roundingMode
  **/
  @Schema(description = "")
  public RoundingModeDTO getRoundingMode() {
    return roundingMode;
  }

  public void setRoundingMode(RoundingModeDTO roundingMode) {
    this.roundingMode = roundingMode;
  }

  public ContractProposalApprovalDTO settlement(PartySettlementInstructionDTO settlement) {
    this.settlement = settlement;
    return this;
  }

   /**
   * Get settlement
   * @return settlement
  **/
  @Schema(required = true, description = "")
  public PartySettlementInstructionDTO getSettlement() {
    return settlement;
  }

  public void setSettlement(PartySettlementInstructionDTO settlement) {
    this.settlement = settlement;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractProposalApprovalDTO contractProposalApproval = (ContractProposalApprovalDTO) o;
    return Objects.equals(this.internalRefId, contractProposalApproval.internalRefId) &&
        Objects.equals(this.roundingRule, contractProposalApproval.roundingRule) &&
        Objects.equals(this.roundingMode, contractProposalApproval.roundingMode) &&
        Objects.equals(this.settlement, contractProposalApproval.settlement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalRefId, roundingRule, roundingMode, settlement);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractProposalApprovalDTO {\n");
    
    sb.append("    internalRefId: ").append(toIndentedString(internalRefId)).append("\n");
    sb.append("    roundingRule: ").append(toIndentedString(roundingRule)).append("\n");
    sb.append("    roundingMode: ").append(toIndentedString(roundingMode)).append("\n");
    sb.append("    settlement: ").append(toIndentedString(settlement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
