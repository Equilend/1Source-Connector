/*
 * Spire-Trade-Service
 * Spire-Trade-REST-API
 *
 * OpenAPI spec version: 4.0
 * Contact: support.stonewain.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.intellecteu.onesource.integration.services.client.spire.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * NQueryInResolverDTO
 */
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-23T11:29:17.054Z")
public class NQueryInResolverDTO {
  @JsonProperty("applyAllImplicit")
  private Boolean applyAllImplicit = null;

  @JsonProperty("inMap")
  private Map<String, ResolverInData> inMap = null;

  @JsonProperty("nQuery")
  private NQuery nQuery = null;

  @JsonProperty("resolvers")
  private List<NQueryResolverMetaobject> resolvers = null;

  public NQueryInResolverDTO applyAllImplicit(Boolean applyAllImplicit) {
    this.applyAllImplicit = applyAllImplicit;
    return this;
  }

   /**
   * Get applyAllImplicit
   * @return applyAllImplicit
  **/
  @ApiModelProperty(value = "")
  public Boolean isApplyAllImplicit() {
    return applyAllImplicit;
  }

  public void setApplyAllImplicit(Boolean applyAllImplicit) {
    this.applyAllImplicit = applyAllImplicit;
  }

  public NQueryInResolverDTO inMap(Map<String, ResolverInData> inMap) {
    this.inMap = inMap;
    return this;
  }

  public NQueryInResolverDTO putInMapItem(String key, ResolverInData inMapItem) {
    if (this.inMap == null) {
      this.inMap = new HashMap<>();
    }
    this.inMap.put(key, inMapItem);
    return this;
  }

   /**
   * Get inMap
   * @return inMap
  **/
  @ApiModelProperty(value = "")
  public Map<String, ResolverInData> getInMap() {
    return inMap;
  }

  public void setInMap(Map<String, ResolverInData> inMap) {
    this.inMap = inMap;
  }

  public NQueryInResolverDTO nQuery(NQuery nQuery) {
    this.nQuery = nQuery;
    return this;
  }

   /**
   * Get nQuery
   * @return nQuery
  **/
  @ApiModelProperty(value = "")
  public NQuery getNQuery() {
    return nQuery;
  }

  public void setNQuery(NQuery nQuery) {
    this.nQuery = nQuery;
  }

  public NQueryInResolverDTO resolvers(List<NQueryResolverMetaobject> resolvers) {
    this.resolvers = resolvers;
    return this;
  }

  public NQueryInResolverDTO addResolversItem(NQueryResolverMetaobject resolversItem) {
    if (this.resolvers == null) {
      this.resolvers = new ArrayList<>();
    }
    this.resolvers.add(resolversItem);
    return this;
  }

   /**
   * Get resolvers
   * @return resolvers
  **/
  @ApiModelProperty(value = "")
  public List<NQueryResolverMetaobject> getResolvers() {
    return resolvers;
  }

  public void setResolvers(List<NQueryResolverMetaobject> resolvers) {
    this.resolvers = resolvers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NQueryInResolverDTO nqueryInResolverDTO = (NQueryInResolverDTO) o;
    return Objects.equals(this.applyAllImplicit, nqueryInResolverDTO.applyAllImplicit) &&
        Objects.equals(this.inMap, nqueryInResolverDTO.inMap) &&
        Objects.equals(this.nQuery, nqueryInResolverDTO.nQuery) &&
        Objects.equals(this.resolvers, nqueryInResolverDTO.resolvers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyAllImplicit, inMap, nQuery, resolvers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NQueryInResolverDTO {\n");
    
    sb.append("    applyAllImplicit: ").append(toIndentedString(applyAllImplicit)).append("\n");
    sb.append("    inMap: ").append(toIndentedString(inMap)).append("\n");
    sb.append("    nQuery: ").append(toIndentedString(nQuery)).append("\n");
    sb.append("    resolvers: ").append(toIndentedString(resolvers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

